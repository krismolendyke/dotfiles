#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.bashrc=, will be generated.

** OS

   OS specific configuration is currently split out into the following
   distinct files:

   - =linux.org=
   - =macos.org=

   Tangling of those files must be done manually on the correct
   system.

* Shell

** Change Default Shell

   For macOS this should be the Homebrew installed =bash= /not/ the
   system =bash= path.

   #+BEGIN_SRC sh
     chsh -s /opt/homebrew/bin/bash
     export SHELL=/opt/homebrew/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     echo ${SHELL}
   #+END_SRC

   On macOS:

   #+BEGIN_SRC sh
     sudo dscl . -create ${HOME} UserShell ${SHELL}
   #+END_SRC

   #+BEGIN_SRC sh
     dscl . -read ${HOME} UserShell
   #+END_SRC

   Make the Bash configuration directory:

   #+BEGIN_SRC sh
     mkdir -p "${HOME}/.bashrc.d"
   #+END_SRC

** =.inputrc=
   :PROPERTIES:
   :header-args: :tangle ~/.inputrc :mkdirp yes
   :END:

   #+BEGIN_SRC sh
     set bell-style none
     set colored-completion-prefix on
     set colored-stats on
     set completion-ignore-case off
     set convert-meta off
     set expand-tilde on
     set input-meta on
     set output-meta on
     set show-all-if-ambiguous on
     set visible-stats on
   #+END_SRC

** =.bash_profile=
   :PROPERTIES:
   :header-args: :tangle ~/.bash_profile :mkdirp yes
   :END:

   #+BEGIN_SRC sh
     source "${HOME}/.bashrc"
   #+END_SRC

** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc :mkdirp yes
   :END:

   Load all configuration:

   #+BEGIN_SRC sh
     for f in "${HOME}/.bashrc.d/"*.bash; do
         source "${f}"
     done
     unset -v config
   #+END_SRC

   =TODO= If these modify =PATH=, etc., I should figure out a way to pre/post them with the rest of this setup.  For
   instance, =asdf= tries to shim =PATH= here but then gets overwritten later by =pathmunge=.

** Custom
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/100-main.bash :mkdirp yes
   :END:

   Interactive shell options.

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export K20E_SECRET_HOME=${HOME}/.bashrc.d/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${K20E_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${K20E_SECRET_HOME}
      chmod -Rf 0600 ${K20E_SECRET_HOME}/*.sh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export K20E_SECRET_VARIABLES=${K20E_SECRET_HOME}/variables.sh
      export K20E_SECRET_ALIASES=${K20E_SECRET_HOME}/aliases.sh
      export K20E_SECRET_PATH=${K20E_SECRET_HOME}/path.sh
      export K20E_SECRET_FUNCTIONS=${K20E_SECRET_HOME}/functions.sh
    #+END_SRC

*** Options

    #+BEGIN_SRC sh
      shopt -s \
            autocd \
            cdspell \
            checkjobs \
            checkwinsize \
            dirspell \
            histappend \
            no_empty_cmd_completion
    #+END_SRC

*** Variables

    Bash variables.

    #+BEGIN_SRC sh
      LANG=en_US.UTF-8

      HISTSIZE=100000
      HISTCONTROL=ignoredups:erasedups
      HISTTIMEFORMAT='%F %T '
    #+END_SRC

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/code
      export GOOGLE="${HOME}/Google?Drive/My?Drive"
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      if [ -d "${HOME}/.cargo" ]; then
          export CARGO_HOME=${HOME}/.cargo
      fi

      # https://github.com/rust-lang-nursery/rustfmt#tips
      if [[ -x ${CARGO_HOME}/bin/rustc ]]; then
          export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:${DYLD_LIBRARY_PATH}
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export HOMEBREW_CASK_HOME=/opt/homebrew/Caskroom
          export HOMEBREW_CELLAR=$(/opt/homebrew/bin/brew --cellar)
          export HOMEBREW_INSTALL_CLEANUP=1
          export HOMEBREW_NO_ENV_HINTS=1
      fi

      if [[ -x jenv ]]; then
          export JENV_HOME=${HOME}/.jenv
      fi
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export LANG=en_US.UTF-8
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_VARIABLES} ]; then
          source ${K20E_SECRET_VARIABLES}
      fi
    #+END_SRC

    https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file

    #+BEGIN_SRC sh
      export RIPGREP_CONFIG_PATH=${HOME}/.ripgreprc
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      export CDPATH="${CODE_HOME}:${GOOGLE}"
    #+END_SRC

*** =PATH=

    #+BEGIN_SRC sh
      pathmunge () {
          case ":${PATH}:" in
              ,*:"$1":*)
                  ;;
              ,*)
                  if [ "$2" = "after" ] ; then
                      PATH=$PATH:$1
                  else
                      PATH=$1:$PATH
                  fi
          esac
      }
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -v ${JENV_HOME} ]; then
          pathmunge "${JENV_HOME}/bin"
      fi

      pathmunge /usr/local/sbin
      pathmunge /usr/local/bin
      pathmunge "${HOME}/bin"

      if [ -v ${CARGO_HOME} ]; then
          pathmunge "${CARGO_HOME}/bin"
      fi

      if [ -v ${VLC_HOME} ]; then
          pathmunge "${VLC_HOME}"
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          pathmunge /opt/homebrew/bin
          pathmunge /opt/homebrew/sbin
          pathmunge /usr/local/opt/python/libexec/bin
          pathmunge "$(/opt/homebrew/bin/brew --prefix git)/share/git-core/contrib/diff-highlight"
          pathmunge "$(/opt/homebrew/bin/brew --prefix)/opt/python/libexec/bin"
      fi

      if [[ -x /usr/share/doc/git/contrib/diff-highlight ]]; then
          pathmunge /usr/share/doc/git/contrib/diff-highlight
      fi

      if [[ -x /bin/go ]]; then
          pathmunge /bin/go/bin
          pathmunge "$(/bin/go env GOPATH)/bin"
      fi

      if [[ -x /opt/homebrew/bin/go ]]; then
          pathmunge "$(/opt/homebrew/bin/go env GOPATH)/bin"
      fi

      # Rancher Desktop instead of Docker as of 3/18/24
      pathmunge "${HOME}/.rd/bin"
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_PATH} ]; then
          source ${K20E_SECRET_PATH}
      fi
    #+END_SRC

*** =.dir_colors=

    https://www.nordtheme.com/docs/ports/dircolors

    #+BEGIN_SRC sh
      [ -e "${HOME}/.dir_colors" ] && eval $(dircolors "${HOME}/.dir_colors")
    #+END_SRC

*** 1Password CLI

    Generate completion script:

    =op completion bash > /opt/homebrew/etc/bash_completion.d/op=

    #+begin_src sh
      [ -e /opt/homebrew/etc/bash_completion.d/op ] && source /opt/homebrew/etc/bash_completion.d/op
    #+end_src

*** jEnv

    For managing multiple Java installations.

    #+BEGIN_SRC sh
      if [[ -x jenv ]]; then
          eval "$(jenv init -)"
      fi
    #+END_SRC

*** [[https://www.nomadproject.io/][Nomad]]

    #+BEGIN_SRC sh
      [ -x /usr/bin/nomad ] && complete -C /usr/bin/nomad nomad
    #+END_SRC

*** [[https://github.com/nvm-sh/nvm][nvm]]

    For managing multiple ... Node installations.  Installed [[https://aur.archlinux.org/packages/nvm/][from AUR]].

    #+BEGIN_SRC sh
      export NVM_DIR="$HOME/.nvm"
      [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
      [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
    #+END_SRC

*** =PYTHON_USER_BASE=

    Add Python =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user

    #+BEGIN_SRC sh
      export PYTHON_USER_BASE=$(python -m site --user-base)
      pathmunge "${PYTHON_USER_BASE}/bin"
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ..="cd ../"
      alias ...="cd ../../"
      alias ....="cd ../../.."
      alias dirs="dirs -v"
      alias emacs="/usr/bin/emacs --no-window-system"
      alias emacsclient="/usr/bin/emacsclient --no-wait"
      alias ec="emacsclient"
      alias g="git"
      alias j="jobs -l"
      alias k="kubectl"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls --color=always -lhF"
      alias lll="ll --color=always"
      alias ls="ls --color=always -GF"
      alias l="ls --color=always"
      alias tree="tree -C"

      if [[ "$OSTYPE" == darwin* ]]; then
          alias brewdump="brew bundle dump --force --global --verbose && pbcopy < ${HOME}/.Brewfile"
          alias emacsclient="$(/opt/homebrew/bin/brew --prefix)/bin/emacsclient --no-wait"
          alias top="top -ocpu -Orsize"
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_ALIASES} ]; then
          source ${K20E_SECRET_ALIASES}
      fi
    #+END_SRC

*** Completions

    [2020-09-05 Sat]

    For Arch need to update to https://wiki.archlinux.org/index.php/Bash#Tab_completion.

    #+BEGIN_SRC sh
      [ -e /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion
      [ -e /etc/bash_completion ] && source /etc/bash_completion
    #+END_SRC

**** =kubectl=, =k=, =kctx=, =kns=, =krew=

     Using MicroK8s in Ubuntu at the moment.

     Instead of =snap= below, maybe =microk8s.status --yaml= parsing?

     #+BEGIN_SRC sh
     #+END_SRC

     macOS completion with completion for my =k= alias:

     #+BEGIN_SRC sh
       [ -e /opt/homebrew/etc/bash_completion.d/kubectl ] && source /opt/homebrew/etc/bash_completion.d/kubectl && complete -o default -F __start_kubectl k
     #+END_SRC

     Install [[https://github.com/ahmetb/kubectx][kubectx]] (via [[#brewfile][=${HOME}/.Brewfile=]]), completion for helper
     tools =kctx=, =kns=:

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/kubectx ] && source /usr/share/bash-completion/completions/kubectx && alias kctx="kubectx"
       [ -e /usr/share/bash-completion/completions/kubens ] && source /usr/share/bash-completion/completions/kubens && alias kns="kubens"

       [ -e /opt/homebrew/etc/bash_completion.d/kubectx ] && source /opt/homebrew/etc/bash_completion.d/kubectx && alias kctx="kubectx"
       [ -e /opt/homebrew/etc/bash_completion.d/kubens ] && source /opt/homebrew/etc/bash_completion.d/kubens && alias kns="kubens"
     #+END_SRC

     Linux =kubectx= install manually, completion to =pkg-config
     --variable=completionsdir bash-completion= dir.

     Change currently selected color:

     #+BEGIN_SRC sh
       export KUBECTX_CURRENT_FGCOLOR=$(tput setaf 2)
     #+END_SRC

     Install [[https://krew.sigs.k8s.io][krew]] via Homebrew.

     #+begin_src sh
       pathmunge "${HOME}/.krew/bin"
     #+end_src

**** Git

     #+BEGIN_SRC sh
       [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

       [ -e /usr/local/etc/bash_completion.d/git-completion.bash ] && source /usr/local/etc/bash_completion.d/git-completion.bash
       [ -e /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git
     #+END_SRC

     Add completion for my muscle memory alias of =g= for =git=:

     #+BEGIN_SRC sh
        __git_complete g __git_main
     #+END_SRC

**** =systemd=

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/systemctl ] && source /usr/share/bash-completion/completions/systemctl
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_FUNCTIONS} ]; then
          source ${K20E_SECRET_FUNCTIONS}
      fi
    #+END_SRC

    This is a clever =emacsclient= hack to support opening files at a line number with the =:linum= suffix that I stumbled
    across at https://stuff-things.net/2019/07/31/opening-files-with-line-numbers-in-emacs.

    #+begin_src sh
      function k20e_ec () {
          if [[ $1 =~ (.*):([0-9]+):(.*)$ ]]; then
              emacsclient "+${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
          else
              emacsclient "$@"
          fi
      }

      alias ec=k20e_ec
    #+end_src

    #+BEGIN_SRC sh
      function k20e_exif_strip() {
          local path="$1"

          if [ ! -e "${path}" ]; then
              echo "Image at path \"${path}\" does not exist"
              return
          fi

          echo "Before:"
          echo
          identify -verbose "${path}" | rg exif

          mogrify -strip "${path}"

          echo
          echo "After:"
          echo
          identify -verbose "${path}" | rg exif
      }
    #+END_SRC

    #+begin_src sh
      function k20e_jqf() {
          local path="$1"
          local tmpPath

          if [ ! -e "${path}" ]; then
              echo "File at path \"${path}\" does not exist"
              return
          fi

          tmpPath=$(mktemp)
          cp "${path}" "${tmpPath}"
          jq . "${tmpPath}" > "${path}"
          rm "${tmpPath}"
      }
    #+end_src

*** AWS CLI

    #+BEGIN_SRC sh
      export AWS_SDK_LOAD_CONFIG=1
      export AWS_VAULT_KEYCHAIN_NAME=login


      if [[ "$OSTYPE" == darwin* ]]; then
          complete -C '/opt/homebrew/bin/aws_completer' aws
      else
          complete -C '/usr/bin/aws_completer' aws
      fi
    #+END_SRC

*** Google Cloud SDK

    Completion:

    #+BEGIN_SRC sh
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc
    #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e_pip_upgrade() {
          if [[ $(which deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --break-system-packages --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

*** Terraform

    #+begin_src sh
      if command -v terraform 1>/dev/null 2>&1; then
          complete -C terraform terraform
      fi
    #+end_src

* wezterm
   :PROPERTIES:
   :header-args: :tangle ~/.wezterm.lua :mkdirp yes
   :END:

   =TERM= setup https://wezfurlong.org/wezterm/config/lua/config/term.html

   #+begin_src lua
     local wezterm = require 'wezterm'
     local act = wezterm.action
     local config = {}

     if wezterm.config_builder then
        config = wezterm.config_builder()
     end

     -- term https://wezfurlong.org/wezterm/config/lua/config/term.html
     config.term = "wezterm"

     -- Shell
     if wezterm.target_triple == 'aarch64-apple-darwin' then
        config.default_prog = {'/opt/homebrew/bin/bash'}
     elseif wezterm.target_triple == 'x86_64-unknown-linux-gnu' then
        config.default_prog = {'/bin/bash'}
     end

     -- Font
     config.font = wezterm.font('PragmataPro Liga')
     config.font_size = 22

     -- GUI
     config.initial_rows = 48
     config.initial_cols = 110
     config.enable_tab_bar = false

     -- Theme
     function get_appearance()
        if wezterm.gui then
           return wezterm.gui.get_appearance()
        end
        return 'Dark'
     end

     function scheme_for_appearance(appearance)
        if appearance:find 'Dark' then
           return 'Tomorrow Night Bright'
        else
           return 'Tomorrow'
        end
     end

     config.color_scheme = scheme_for_appearance(get_appearance())

     -- Bindings
     config.keys = {
        -- macOS move forward/backward by word with ⌘-f, ⌘-b
        { key = 'b', mods = 'CMD', action = act.SendString '\x1bb' },
        { key = 'f', mods = 'CMD', action = act.SendString '\x1bf' },

        -- macOS backward erase word (see
        -- https://apple.stackexchange.com/questions/101754/os-x-disable-cmd-h-or-hide-app-command for re-mapping ⌘-h from
        -- "Hide WezTerm" to something else)
        { key = 'h', mods = 'CMD', action = act.SendString '\x1b\x7f' },

        -- macOS forward erase word
        { key = 'd', mods = 'CMD', action = act.SendString '\x1bd' },

        -- Search, rather than ⌘-f
        { key = 's', mods = 'CMD', action = act.Search 'CurrentSelectionOrEmptyString' },
     }

     return config
   #+end_src

* =.config=

** =yamllint/config=
   :PROPERTIES:
   :header-args: :tangle ~/.config/yamllint/config :mkdirp yes
   :END:

    Create a configuration directory: =mkdir -p ${HOME}/.config/yamllint=

   See https://yamllint.readthedocs.io/en/stable/configuration.html and
   https://yamllint.readthedocs.io/en/stable/rules.html.

   #+begin_src yaml
     ---

     yaml-files:
       - '*.yaml'
       - '*.yml'
       - '.yamllint'

     rules:
       braces:
         level: warning
       brackets: enable
       colons:
         level: warning
       commas: enable
       comments:
         level: warning
       comments-indentation:
         level: warning
       document-end: disable
       document-start:
         level: warning
       empty-lines: enable
       empty-values: disable
       float-values: disable
       hyphens: enable
       indentation: enable
       key-duplicates: enable
       key-ordering: disable
       line-length: disable
       new-line-at-end-of-file:
         level: warning
       new-lines: enable
       octal-values: disable
       quoted-strings: disable
       trailing-spaces:
         level: warning
       truthy:
         level: warning
   #+end_src

* =asdf=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/110-asdf.bash :mkdirp yes
   :END:

   Need to add completion for my silly Dvorak alias.  Lookup existing completion function: =complete -p asdf=, then add
   it below.

   #+begin_src sh
     alias aoeu='asdf'
     [ -e /opt/homebrew/opt/asdf/libexec/asdf.sh ] && source /opt/homebrew/opt/asdf/libexec/asdf.sh && complete -o default -F _asdf aoeu
   #+end_src

* [[https://github.com/eza-community/eza][eza]]
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/130-eza.bash :mkdirp yes
   :END:

  #+begin_src sh
    if command -v eza 1>/dev/null 2>&1; then
        # Workaround for https://github.com/orgs/eza-community/discussions/209#discussioncomment-10801021 which is apparently still not resolved
        export EXA_COLORS="xx=''"
        export EZA_CONFIG_DIR="${HOME}/.config/eza"
        export EZA_ICON_SPACING=1
        export EZA_ICONS_AUTO=1
        alias l="eza --classify --git --git-repos --grid"
        alias ls="eza --classify --git --git-repos --grid"
        alias ll="eza --classify --git --git-repos --long --header --smart-group"
        alias lt="eza --classify --git --git-repos --tree"
        alias ltl="eza --classify --git --git-repos --tree --long --header --smart-group"
    fi
  #+end_src

** Config
    :PROPERTIES:
    :header-args: :tangle ~/.config/eza/theme.yml :mkdirp yes
    :END:

    #+begin_src yaml
      ---
      # See https://github.com/eza-community/eza-themes
    #+end_src
* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig :mkdirp yes
   :END:

   The =includeIf= section below allows for sticking a =.gitconfig= in a directory such that repositories cloned into that
   directory will read that config for each repository there.  This is useful for setting values like email, etc.,
   that might be different than the global value without having to set it specifically in each repository's config.
   Just clone the repository into this directory and make sure that the config is set.  =git config --list= is useful
   when making sure that the config values are set properly.

   #+BEGIN_SRC conf
     [user]
             name = Kris Molendyke
             email = krismolendyke@users.noreply.github.com
             useconfigonly = true
     [color]
             ui = auto
     [core]
             excludesfile = ~/.gitignore-global
             whitespace = -trailing-space,-space-before-tab
             editor = emacsclient
     [apply]
             whitespace = nowarn
     [alias]
             diff = difftool
             stache = stash
             st = status -sb
             a = add -p
             l = log --color-moved --stat --no-merges --ext-diff
             lp = log --color-moved --patch --stat --no-merges --ext-diff
             wlp = log --color-moved --patch --stat --color-words --no-merges --ext-diff
             lo = log --color-moved --oneline --decorate --no-merges --ext-diff
             lf = log --color-moved --pretty=format: --name-only -z --max-count 1 --no-merges --ext-diff
             co = checkout
             br = branch -vv
             wdiff = diff --color-moved --color-words --ext-diff
             ds = diff --color-moved --staged --ext-diff
     [advice]
             statusHints = true
     [rebase]
             autosquash = true
     [diff]
             algorithm = histogram
             colorMoved = zebra
             compactionHeuristic = 1
             external = difft --display=inline
             tool = difftastic
     [difftool]
             prompt = false
     [difftool "difftastic"]
             cmd = difft --display=inline "$LOCAL" "$REMOTE"
     [help]
             autocorrect = 1
     [pager]
             difftool = true
     [pull]
             rebase = false
     [init]
             defaultBranch = main
     [credential]
             helper = cache --timeout=3600
     [tag]
             sort = version:refname

     # Conditional include to set some work defaults, e.g., email
     [includeIf "gitdir/i:~/code/work/"]
             path = ~/code/work/.gitconfig
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global :mkdirp yes
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/Linux.gitignore #
     ##########################################################################

     ,*~

     # temporary files which can be created if a process still has a handle open of a deleted file
     .fuse_hidden*

     # KDE directory preferences
     .directory

     # Linux trash folder which might appear on any partition or disk
     .Trash-*

     # .nfs files are created when an open file is removed but is still being accessed
     .nfs*


     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/macOS.gitignore #
     ##########################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk


     ##############################################################################
     # Below from:                                                                #
     #                                                                            #
     # https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore #
     ##############################################################################

     # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
     # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

     # User-specific stuff
     .idea/**/workspace.xml
     .idea/**/tasks.xml
     .idea/**/usage.statistics.xml
     .idea/**/dictionaries
     .idea/**/shelf

     # Generated files
     .idea/**/contentModel.xml

     # Sensitive or high-churn files
     .idea/**/dataSources/
     .idea/**/dataSources.ids
     .idea/**/dataSources.local.xml
     .idea/**/sqlDataSources.xml
     .idea/**/dynamic.xml
     .idea/**/uiDesigner.xml
     .idea/**/dbnavigator.xml

     # Gradle
     .idea/**/gradle.xml
     .idea/**/libraries

     # Gradle and Maven with auto-import
     # When using Gradle or Maven with auto-import, you should exclude module files,
     # since they will be recreated, and may cause churn.  Uncomment if using
     # auto-import.
     .idea/modules.xml
     .idea/*.iml
     .idea/modules

     # CMake
     cmake-build-*/

     # Mongo Explorer plugin
     .idea/**/mongoSettings.xml

     # File-based project format
     ,*.iws

     # IntelliJ
     out/

     # mpeltonen/sbt-idea plugin
     .idea_modules/

     # JIRA plugin
     atlassian-ide-plugin.xml

     # Cursive Clojure plugin
     .idea/replstate.xml

     # Crashlytics plugin (for Android Studio and IntelliJ)
     com_crashlytics_export_strings.xml
     crashlytics.properties
     crashlytics-build.properties
     fabric.properties

     # Editor-based Rest Client
     .idea/httpRequests

     # Android studio 3.1+ serialized cache file
     .idea/caches/build_file_checksums.ser
   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =pyenv=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/102-pyenv.bash :mkdirp yes
   :END:

   #+begin_src sh
     if command -v pyenv 1>/dev/null 2>&1; then
         eval "$(pyenv init -)"
     fi
   #+end_src

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt :mkdirp yes
   :END:

   Use [[https://kennethreitz.org/essays/2016/02/25/a-better-pip-workflow][A Better Pip Workflow™]] to specify packages that I do actually want installed to the user's packages.

   #+BEGIN_SRC python
     # User packages
     boto3
     botocore
     http-prompt
     keyring
     pipdeptree[graphviz]
     pylsp-rope
     python-lsp-server[all]
     twine
     urllib3
     virtualenvwrapper
   #+END_SRC

** =uv=



* =ripgrep=
   :PROPERTIES:
   :header-args: :tangle ~/.ripgreprc :mkdirp yes
   :END:

  See =RIPGREP_CONFIG_PATH= above.

  #+BEGIN_SRC sh
    --sort-files
  #+END_SRC

* [[https://github.com/lotabout/skim][skim]]
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/120-skim.bash :mkdirp yes
   :END:

  #+begin_src sh
    export SKIM_DEFAULT_COMMAND="git ls-tree -r --name-only HEAD || rg --files || find ."
    export SKIM_DEFAULT_OPTIONS="--ansi --bind 'alt-a:select-all+accept,ctrl-o:execute(emacsclient --no-wait {})+accept' --prompt '❯ ' --cmd-prompt 'C❯ ' --color 'light' --multi --tiebreak=score,begin,end"
  #+end_src

  skim [[https://github.com/lotabout/skim/blob/291fc34c58b1670a5e8c95f1e8f930b82c030b19/shell/key-bindings.bash#L82C1-L82C55][takes over]] =C-t= in the terminal.  I live by that key binding to transpose typographical errors.  Set it
  explicitly:

  #+begin_src sh
    bind -r '\C-t'
    bind '\C-t: transpose-chars'
  #+end_src

* SSH

  Create a configuration directory:

  #+BEGIN_SRC sh
    mkdir -p ${HOME}/.ssh/config.d
  #+END_SRC

  On macOS, 1Password requires this to work with the [[*Environment][Environment]] properly:

  #+begin_src sh
    mkdir -p ~/.1password && ln -s ~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock ~/.1password/agent.sock
  #+end_src

** =config=
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config :mkdirp yes
   :END:

   #+BEGIN_SRC conf
     ServerAliveCountMax 5
     ServerAliveInterval 60

     Host *
         IdentityAgent ~/.1password/agent.sock
         StrictHostKeyChecking accept-new

     Include ~/.ssh/config.d/*
   #+END_SRC

** Personal
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config.d/personal :mkdirp yes
   :END:

   Splitting work & personal to allow for using multiple GitHub accounts.  See
   https://developer.1password.com/docs/ssh/agent/advanced/#use-multiple-github-accounts.

   #+begin_src conf
     Host personal.localhost
          HostName github.com
          User git
          IdentityFile ~/.ssh/personal.pub
          IdentitiesOnly yes
          PreferredAuthentications publickey
          PasswordAuthentication no
   #+end_src

** Work
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config.d/work :mkdirp yes
   :END:

   #+begin_src conf
     Host work.localhost
          HostName github.com
          User git
          IdentityFile ~/.ssh/work.pub
          IdentitiesOnly yes
          PreferredAuthentications publickey
          PasswordAuthentication no
   #+end_src

** Environment
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/101-ssh-env.bash :mkdirp yes
   :END:

   #+begin_src sh
     export SSH_AUTH_SOCK=~/.1password/agent.sock
   #+end_src

* Ghostty
    :PROPERTIES:
    :header-args: :tangle ~/.config/ghostty/config :mkdirp yes
    :END:

    - [X] https://ghostty.org/docs/config/keybind/reference#jump_to_prompt
    - [X] https://ghostty.org/docs/config/keybind/reference#toggle_quick_terminal

    #+begin_src conf
      background-opacity = 0.75
      background-blur-radius = 20

      # See also shell-integration-features
      cursor-style = block
      cursor-style-blink = true

      font-family = PragmataPro Mono Liga
      font-feature = calt
      font-size = 20

      # Backward erase word
      # This binds cmd+h to alt+backspace which will backward erase one word
      # Remember to go change the "Hide Ghostty" menu shortcut to something else, e.g.,
      # https://apple.stackexchange.com/questions/101754/os-x-disable-cmd-h-or-hide-app-command
      keybind = cmd+h=text:\x1b\x7f
      # Forward erase word
      keybind = cmd+d=esc:d

      # Backward word
      keybind = cmd+b=esc:b
      # Forward word
      keybind = cmd+f=esc:f

      # Jump to prompt
      keybind = ctrl+up=jump_to_prompt:-1
      keybind = ctrl+down=jump_to_prompt:1

      # Quick terminal
      keybind = global:ctrl+alt+cmd+t=toggle_quick_terminal

      macos-option-as-alt = true
      macos-titlebar-style = hidden

      quit-after-last-window-closed = true

      shell-integration = bash
      # This fixed an issue w/ the initial Bash cursor showing as a bar instead of a block before a command was executed
      # (see cursor-style)
      shell-integration-features = no-cursor

      theme = light:Tomorrow,dark:Tomorrow Night Bright

      window-height = 48
      window-width = 110
    #+end_src

* Starship
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/999-starship.bash :mkdirp yes
   :END:

   #+begin_src sh
     if command -v starship 1>/dev/null 2>&1; then
         function k20e_starship_precmd_user_func() {
             # Immediately append commands to HISTFILE rather than waiting for logout
             # NB this does not affect the current session's history but it does mean that a login will have access to all
             # recent commands from any current sessions
             history -a
         }
         # See https://starship.rs/advanced-config/#custom-pre-prompt-and-pre-execution-commands-in-bash
         starship_precmd_user_func='k20e_starship_precmd_user_func'

         # Only init one time, I found issues w/ this executing multiple time, e.g., via interactive `source ~/.bashrc`
         if [ ! -v STARSHIP_SHELL ]; then
             eval "$(starship init bash)"
         fi
     fi
   #+end_src

** Config
    :PROPERTIES:
    :header-args: :tangle ~/.config/starship.toml :mkdirp yes
    :END:

*** https://starship.rs/config/#prompt

    This section must be first!

    #+begin_src toml
      format = """
      $aws\
      $gcloud\
      $kubernetes\
      $docker_context\
      $line_break\
      $username\
      $hostname\
      $localip\
      $shlvl\
      $directory\
      $git_branch\
      $git_commit\
      $git_state\
      $git_metrics\
      $git_status\
      $package\
      $c\
      $cmake\
      $golang\
      $helm\
      $java\
      $julia\
      $kotlin\
      $gradle\
      $lua\
      $nodejs\
      $opa\
      $perl\
      $python\
      $ruby\
      $rust\
      $scala\
      $swift\
      $terraform\
      $zig\
      $buf\
      $memory_usage\
      $env_var\
      $crystal\
      $custom\
      $sudo\
      $cmd_duration\
      $line_break\
      $jobs\
      $battery\
      $time\
      $status\
      $os\
      $container\
      $shell\
      $character"""
    #+end_src

*** Presets

     Started with =starship preset nerd-font-symbols= and removed stuff I'll never need.

     #+begin_src toml
       [buf]
       symbol = " "

       [c]
       symbol = " "

       [hostname]
       ssh_symbol = " "

       [java]
       symbol = " "

       [lua]
       symbol = " "

       [memory_usage]
       symbol = "󰍛 "

       [nodejs]
       symbol = " "

       [os.symbols]
       Alpine = " "
       Amazon = " "
       Android = " "
       Arch = " "
       CentOS = " "
       Debian = " "
       Linux = " "
       Macos = " "
       Raspbian = " "
       Redhat = " "
       RedHatEnterprise = " "
       Ubuntu = " "
       Unknown = " "

       [package]
       symbol = "󰏗 "

       [ruby]
       symbol = " "

       [rust]
       symbol = " "
     #+end_src

*** https://starship.rs/config/#aws

    #+begin_src toml
      [aws]
      symbol = 'aws '
      format = '[$symbol($profile )(\($region\) )(\[$duration\] )]($style)'
    #+end_src

*** https://starship.rs/config/#battery

    #+begin_src toml
      [battery]
      disabled = true
    #+end_src

*** https://starship.rs/config/#command-duration

    #+begin_src toml
      [cmd_duration]
      format = '[$duration]($style) '
    #+end_src

*** https://starship.rs/config/#directory

    #+begin_src toml
      [directory]
      read_only = ' 󰌾'
      truncation_length = 4
      format ='[$path]($style)[$read_only]($read_only_style) '
    #+end_src

*** https://starship.rs/config/#docker-context

    #+begin_src toml
      [docker_context]
      symbol = ''
      format = '[$symbol $context]($style) '
    #+end_src

*** https://starship.rs/config/#go

    #+begin_src toml
      [golang]
      symbol = '󰟓 '
      format = '[$symbol($version )]($style) '
    #+end_src

*** https://starship.rs/config/#google-cloud-gcloud

    #+begin_src toml
      [gcloud]
      symbol = 'gcp '
      format = '[$symbol$project(\($region\))]($style) '
      detect_env_vars = [ 'GCLOUD_ACTIVE' ]

      [gcloud.project_aliases]
      gcp-s1-prod-scalyr = "prod"
    #+end_src

*** https://starship.rs/config/#git-branch

    #+begin_src toml
      [git_branch]
      always_show_remote = false
      symbol = ''
      format = '[$symbol $branch(:$remote_branch)]($style) '
    #+end_src

*** https://starship.rs/config/#git-status

    #+begin_src toml
      [git_status]
      # all_status = '$conflicted$stashed$deleted$renamed$modified$staged$untracked'
      format = '([$conflicted$deleted$renamed$modified$staged$untracked$ahead_behind]($style) )'
    #+end_src

*** https://starship.rs/config/#kubernetes

     #+begin_src toml
       [kubernetes]
       disabled = false
       symbol = 'k8s '
       format = '[$symbol$context( \($namespace\))]($style) '
     #+end_src

*** https://starship.rs/config/#python

    #+begin_src toml
      [python]
      symbol = ' '
      format = '[${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
    #+end_src
