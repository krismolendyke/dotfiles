#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Prerequisites

  #+BEGIN_SRC sh
    mkdir -p ~/.bashrc.d/secret
    # TODO: fix the fact that something below this needs a file to exist in the secrets dir
    mkdir -p ~/.ssh/config
  #+END_SRC

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.bashrc=, will be generated.

** OS

   OS specific configuration is currently split out into the following
   distinct files:

   - =linux.org=
   - =macos.org=

   Tangling of those files must be done manually on the correct
   system.

* Shell

** Change Default Shell

   For macOS this should be the Homebrew installed =bash= /not/ the
   system =bash= path.

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/bash
     export SHELL=/usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     echo ${SHELL}
   #+END_SRC

   On macOS:

   #+BEGIN_SRC sh
     sudo dscl . -create ${HOME} UserShell /usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     dscl . -read ${HOME} UserShell
   #+END_SRC

   Make the Bash configuration directory:

   #+BEGIN_SRC sh
     mkdir -p "${HOME}/.bashrc.d"
   #+END_SRC

** =.inputrc=
   :PROPERTIES:
   :header-args: :tangle ~/.inputrc
   :END:

   #+BEGIN_SRC sh
     set bell-style none
     set colored-completion-prefix on
     set colored-stats on
     set completion-ignore-case off
     set convert-meta off
     set expand-tilde on
     set input-meta on
     set output-meta on
     set show-all-if-ambiguous on
     set visible-stats on
   #+END_SRC

** =.bash_profile=
   :PROPERTIES:
   :header-args: :tangle ~/.bash_profile
   :END:

   #+BEGIN_SRC sh
     source "${HOME}/.bashrc"
   #+END_SRC

** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc
   :END:

   Load all configuration:

   #+BEGIN_SRC sh
     for f in "${HOME}/.bashrc.d/"*.bash; do
         source "${f}"
     done
     unset -v config
   #+END_SRC

** Custom
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/main.bash
   :END:

   Interactive shell options.

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export K20E_SECRET_HOME=${HOME}/.bashrc.d/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${K20E_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${K20E_SECRET_HOME}
      chmod -Rf 0600 ${K20E_SECRET_HOME}/*.sh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export K20E_SECRET_VARIABLES=${K20E_SECRET_HOME}/variables.sh
      export K20E_SECRET_ALIASES=${K20E_SECRET_HOME}/aliases.sh
      export K20E_SECRET_PATH=${K20E_SECRET_HOME}/path.sh
      export K20E_SECRET_FUNCTIONS=${K20E_SECRET_HOME}/functions.sh
    #+END_SRC

*** Options

    #+BEGIN_SRC sh
      shopt -s \
            autocd \
            cdspell \
            checkjobs \
            checkwinsize \
            dirspell \
            histappend \
            no_empty_cmd_completion
    #+END_SRC

*** Variables

    Bash variables.

    #+BEGIN_SRC sh
      LANG=en_US.UTF-8

      HISTSIZE=100000
      HISTCONTROL=erasedups
      HISTTIMEFORMAT='%F %T '
    #+END_SRC

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/code
      export GOOGLE=${HOME}/Google
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      if [ -d "${HOME}/.cargo" ]; then
          export CARGO_HOME=${HOME}/.cargo
      fi

      # https://github.com/rust-lang-nursery/rustfmt#tips
      if [[ -x ${CARGO_HOME}/bin/rustc ]]; then
          export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:${DYLD_LIBRARY_PATH}
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export VLC_HOME=/Applications/VLC.app/Contents/MacOS
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export HOMEBREW_CASK_HOME=/opt/homebrew/Caskroom
          export HOMEBREW_CELLAR=$(/opt/homebrew/bin/brew --cellar)
          export HOMEBREW_INSTALL_CLEANUP=1
      fi

      if [[ -x jenv ]]; then
          export JENV_HOME=${HOME}/.jenv
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export MANPATH=/usr/local/share/man:${MANPATH}
          export NODE_PATH=/usr/local/lib/node_modules:${NODE_PATH}
      fi
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export LANG=en_US.UTF-8
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_VARIABLES} ]; then
          source ${K20E_SECRET_VARIABLES}
      fi
    #+END_SRC

    https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file

    #+BEGIN_SRC sh
      export RIPGREP_CONFIG_PATH=${HOME}/.ripgreprc
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      export CDPATH="${CODE_HOME}:${GOOGLE}"
    #+END_SRC

*** =PATH=

    #+BEGIN_SRC sh
      pathmunge () {
          case ":${PATH}:" in
              ,*:"$1":*)
                  ;;
              ,*)
                  if [ "$2" = "after" ] ; then
                      PATH=$PATH:$1
                  else
                      PATH=$1:$PATH
                  fi
          esac
      }
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -v ${JENV_HOME} ]; then
          pathmunge "${JENV_HOME}/bin"
      fi

      pathmunge /usr/local/sbin
      pathmunge /usr/local/bin
      pathmunge "${HOME}/bin"

      if [ -v ${CARGO_HOME} ]; then
          pathmunge "${CARGO_HOME}/bin"
      fi

      if [ -v ${VLC_HOME} ]; then
          pathmunge "${VLC_HOME}"
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          pathmunge /usr/local/opt/python/libexec/bin
          pathmunge "$(/opt/homebrew/bin/brew --prefix git)/share/git-core/contrib/diff-highlight"
          pathmunge "$(/opt/homebrew/bin/brew --prefix)/opt/python/libexec/bin"
      fi

      if [[ -x /usr/share/doc/git/contrib/diff-highlight ]]; then
          pathmunge /usr/share/doc/git/contrib/diff-highlight
      fi

      if [[ -x /bin/go ]]; then
          pathmunge /bin/go/bin
          pathmunge "$(/bin/go env GOPATH)/bin"
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_PATH} ]; then
          source ${K20E_SECRET_PATH}
      fi
    #+END_SRC

*** =.dir_colors=

    https://www.nordtheme.com/docs/ports/dircolors

    #+BEGIN_SRC sh
      [ -e "${HOME}/.dir_colors" ] && eval $(dircolors "${HOME}/.dir_colors")
    #+END_SRC

*** jEnv

    For managing multiple Java installations.

    #+BEGIN_SRC sh
      if [[ -x jenv ]]; then
          eval "$(jenv init -)"
      fi
    #+END_SRC

*** [[https://www.nomadproject.io/][Nomad]]

    #+BEGIN_SRC sh
      [ -x /usr/bin/nomad ] && complete -C /usr/bin/nomad nomad
    #+END_SRC

*** [[https://github.com/nvm-sh/nvm][nvm]]

    For managing multiple ... Node installations.  Installed [[https://aur.archlinux.org/packages/nvm/][from AUR]].

    #+BEGIN_SRC sh
      [ -e /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh
    #+END_SRC

*** =PYTHON_USER_BASE=

    Add Python =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user

    #+BEGIN_SRC sh
      export PYTHON_USER_BASE=$(python -m site --user-base)
      pathmunge "${PYTHON_USER_BASE}/bin"
    #+END_SRC

*** =PROMPT_COMMAND=

    #+BEGIN_SRC sh
      [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ] && source /usr/local/etc/bash_completion.d/git-prompt.sh

      GIT_PS1_SHOWCOLORHINTS=1
      GIT_PS1_SHOWDIRTYSTATE=1
      GIT_PS1_SHOWUNTRACKEDFILES=1
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_working_directory() {
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          echo "${YELLOW}\w${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_virtual_env() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}p${YELLOW}y${RESET} "
          declare -r SUFFIX=" ${RESET}"
          local value=''
          if [ -n "${VIRTUAL_ENV}" ] && [ -d "${VIRTUAL_ENV}" ]; then
              value=$(basename "${VIRTUAL_ENV}")
              value="${PREFIX}${value}${SUFFIX}"
          fi
          echo "${value}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_gcp_project() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RED='\[\e[0;31m\]'
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}g${RED}c${YELLOW}p${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if [ -e ${HOME}/.config/gcloud/active_config ]; then
              value=$(cat ${HOME}/.config/gcloud/active_config)
              if [[ "${value}" =~ .*prod.* ]]; then
                  value="${RED_BG}${value}"
              fi
              if [[ "${value}" =~ .*apac.* ]]; then
                  value="${RED_BG}${value}"
              fi
              value="${PREFIX}${value}${SUFFIX}"
          fi
          echo "${value}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_aws_profile() {
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${YELLOW}aws${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if [[ -v AWS_PROFILE ]]; then
              value="${AWS_PROFILE}"
          else
              value="∅"
          fi
          if [[ "${value}" =~ .*prod.* ]]; then
              value="${RED_BG}${value}"
          fi
          if [[ "${value}" =~ .*apac.* ]]; then
              value="${RED_BG}${value}"
          fi
          if [[ "${value}" =~ .*stage.* ]]; then
              value="${YELLOW}${value}"
          fi
          echo "${PREFIX}${value}${SUFFIX}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_kubectx() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}k8s${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if command -v k > /dev/null 2>&1; then
              value=$(k config view --output go-template='{{ index . "current-context" }}')
              if [ ! -z "$value" ]; then
                  fullname=${value}
                  if [[ "${value}" =~ ^arn ]]; then
                      value=$(echo "${value}" | cut -d / -f 2)
                  fi
                  value="${value}${RESET}·$(k config view -o=jsonpath="{.contexts[?(@.name==\"${fullname}\")].context.namespace}")"
                  if [[ "${value}" =~ .*prod.* ]]; then
                      value="${RED_BG}${value}"
                  fi
                  if [[ "${value}" =~ .*stage.* ]]; then
                      value="${YELLOW}${value}"
                  fi
                  value="${PREFIX}${value}${SUFFIX}"
              fi
          fi
          echo "${value}"
      }
    #+END_SRC

    For Ubuntu, I had to copy [[https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh][git-prompt.sh]] to
    =/usr/share/bash-completion/completions/=.

    #+BEGIN_SRC sh
      [ -e /usr/share/git/completion/git-prompt.sh ] && source //usr/share/git/completion/git-prompt.sh

      [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

      PROMPT_COMMAND='__git_ps1 \
      "\n$(k20e_aws_profile)$(k20e_kubectx)$(k20e_virtual_env)\n$(k20e_working_directory)" \
      "\n\$ " \
      " %s"'
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ..="cd ../"
      alias ...="cd ../../"
      alias ....="cd ../../.."
      alias dirs="dirs -v"
      alias emacs="/usr/bin/emacs --no-window-system"
      alias emacsclient="/usr/bin/emacsclient --no-wait"
      alias ec="emacsclient"
      alias g="git"
      alias j="jobs -l"
      alias k="kubectl"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls --color=always -lhF"
      alias lll="ll --color=always"
      alias ls="ls --color=always -GF"
      alias l="ls --color=always"
      alias tree="tree -C"

      if [[ "$OSTYPE" == darwin* ]]; then
          alias brewdump="brew bundle dump --force --global --verbose && pbcopy < ${HOME}/.Brewfile"
          alias top="top -ocpu -Orsize"
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_ALIASES} ]; then
          source ${K20E_SECRET_ALIASES}
      fi
    #+END_SRC

**** =ssh TERM=

     My Emacs =multi-term= with =bash= has =TERM=xterm-256color=.  On
     many remote hosts, primarily Amazon Linux, any =xterm= sets
     =PROMPT_COMMAND= and garbles the prompt by attempting to set the
     window title.  =/etc/bashrc= usually contains something like
     this:

     #+BEGIN_EXAMPLE
       if [ -z "$PROMPT_COMMAND" ]; then
         case $TERM in
         xterm*)
             if [ -e /etc/sysconfig/bash-prompt-xterm ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         screen)
             if [ -e /etc/sysconfig/bash-prompt-screen ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         ,*)
             [ -e /etc/sysconfig/bash-prompt-default ] && PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default
             ;;
           esac
       fi
     #+END_EXAMPLE

     Hacking that to some other reasonable value avoids prompt
     garbling and muscle memory typing =unset PROMPT_COMMAND=.

     #+BEGIN_SRC sh
       alias ssh="TERM=ansi ssh"
     #+END_SRC

*** Completions

    [2020-09-05 Sat]

    For Arch need to update to https://wiki.archlinux.org/index.php/Bash#Tab_completion.

    #+BEGIN_SRC sh
      [ -e /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion
      [ -e /etc/bash_completion ] && source /etc/bash_completion
    #+END_SRC

**** =kubectl=, =k=, =kctx=, =kns=

     Using MicroK8s in Ubuntu at the moment.

     Instead of =snap= below, maybe =microk8s.status --yaml= parsing?

     #+BEGIN_SRC sh
     #+END_SRC

     macOS completion with completion for my =k= alias:

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/kubectl ] && source /usr/share/bash-completion/completions/kubectl && complete -o default -F __start_kubectl k
     #+END_SRC

     Install [[https://github.com/ahmetb/kubectx][kubectx]] (via [[#brewfile][=${HOME}/.Brewfile=]]), completion for helper
     tools =kctx=, =kns=:

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/kubectx ] && source /usr/share/bash-completion/completions/kubectx && alias kctx="kubectx"
       [ -e /usr/share/bash-completion/completions/kubens ] && source /usr/share/bash-completion/completions/kubens && alias kns="kubens"
     #+END_SRC

     Linux =kubectx= install manually, completion to =pkg-config
     --variable=completionsdir bash-completion= dir.

     #+BEGIN_SRC sh
     #+END_SRC

     Change currently selected color:

     #+BEGIN_SRC sh
       export KUBECTX_CURRENT_FGCOLOR=$(tput setaf 2)
     #+END_SRC

**** Git

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/git-completion.bash ] && source /usr/local/etc/bash_completion.d/git-completion.bash
       [ -e /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git
     #+END_SRC

     Add completion for my muscle memory alias of =g= for =git=:

     #+BEGIN_SRC sh
        __git_complete g __git_main
     #+END_SRC

**** =systemd=

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/systemctl ] && source /usr/share/bash-completion/completions/systemctl
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_FUNCTIONS} ]; then
          source ${K20E_SECRET_FUNCTIONS}
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_exif_strip() {
          local path="$1"

          if [ ! -e "${path}" ]; then
              echo "Image at path \"${path}\" does not exist"
              return
          fi

          echo "Before:"
          echo
          identify -verbose "${path}" | rg exif

          mogrify -strip "${path}"

          echo
          echo "After:"
          echo
          identify -verbose "${path}" | rg exif
      }
    #+END_SRC

*** AWS CLI

    #+BEGIN_SRC sh
      complete -C '/usr/bin/aws_completer' aws
    #+END_SRC

*** Google Cloud SDK

    Completion:

    #+BEGIN_SRC sh
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc
    #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e-pip-upgrade() {
          if [[ $(which deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

* =.config=

** =alacritty/alacritty.yml=
   :PROPERTIES:
   :header-args: :tangle ~/.config/alacritty/alacritty.yml
   :END:

   - Work on page up/down etc., with =showkey=
     https://github.com/alacritty/alacritty/issues/1593
   - https://github.com/arcticicestudio/nord-alacritty

   #+BEGIN_SRC yaml
     # Configuration for Alacritty, the GPU enhanced terminal emulator.

     # Any items in the `env` entry below will be added as
     # environment variables. Some entries may override variables
     # set by alacritty itself.
     #env:
       # TERM variable
       #
       # This value is used to set the `$TERM` environment variable for
       # each instance of Alacritty. If it is not present, alacritty will
       # check the local terminfo database and use `alacritty` if it is
       # available, otherwise `xterm-256color` is used.
       #TERM: alacritty

     window:
       # Window dimensions (changes require restart)
       #
       # Specified in number of columns/lines, not pixels.
       # If both are `0`, this setting is ignored.
       dimensions:
        columns: 120
        lines: 40

       # Window position (changes require restart)
       #
       # Specified in number of pixels.
       # If the position is not set, the window manager will handle the placement.
       #position:
       #  x: 0
       #  y: 0

       # Window padding (changes require restart)
       #
       # Blank space added around the window in pixels. This padding is scaled
       # by DPI and the specified value is always added at both opposing sides.
       #padding:
       #  x: 0
       #  y: 0

       # Window opacity
       #
       # Window opacity as a floating point number from `0.0` to `1.0`.
       # The value `0.0` is completely transparent and `1.0` is opaque.
       opacity: 0.95

       # Spread additional padding evenly around the terminal content.
       #dynamic_padding: false

       # Window decorations
       #
       # Values for `decorations`:
       #     - full: Borders and title bar
       #     - none: Neither borders nor title bar
       #
       # Values for `decorations` (macOS only):
       #     - transparent: Title bar, transparent background and title bar buttons
       #     - buttonless: Title bar, transparent background, but no title bar buttons
       #decorations: full

       # Startup Mode (changes require restart)
       #
       # Values for `startup_mode`:
       #   - Windowed
       #   - Maximized
       #   - Fullscreen
       #
       # Values for `startup_mode` (macOS only):
       #   - SimpleFullscreen
       #startup_mode: Windowed

       # Window title
       #title: Alacritty

       # Window class (Linux/BSD only):
       #class:
         # Application instance name
         #instance: Alacritty
         # General application class
         #general: Alacritty

       # GTK theme variant (Linux/BSD only)
       #
       # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
       # Set this to `None` to use the default theme variant.
       #gtk_theme_variant: None

     #scrolling:
       # Maximum number of lines in the scrollback buffer.
       # Specifying '0' will disable scrolling.
       #history: 10000

       # Number of lines the viewport will move for every line scrolled when
       # scrollback is enabled (history > 0).
       #multiplier: 3

     # Font configuration
     font:
       # Normal (roman) font face
       normal:
         # Font family
         #
         # Default:
         #   - (macOS) Menlo
         #   - (Linux/BSD) monospace
         #   - (Windows) Consolas
         family: PragmataPro Mono Liga

         # The `style` can be specified to pick a specific face.
         style: Regular

       # Bold font face
       #bold:
         # Font family
         #
         # If the bold family is not specified, it will fall back to the
         # value specified for the normal font.
         #family: monospace

         # The `style` can be specified to pick a specific face.
         #style: Bold

       # Italic font face
       #italic:
         # Font family
         #
         # If the italic family is not specified, it will fall back to the
         # value specified for the normal font.
         #family: monospace

         # The `style` can be specified to pick a specific face.
         #style: Italic

       # Bold italic font face
       #bold_italic:
         # Font family
         #
         # If the bold italic family is not specified, it will fall back to the
         # value specified for the normal font.
         #family: monospace

         # The `style` can be specified to pick a specific face.
         #style: Bold Italic

       # Point size
       size: 14.0

       # Offset is the extra space around each character. `offset.y` can be thought of
       # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
       #offset:
       #  x: 0
       #  y: 0

       # Glyph offset determines the locations of the glyphs within their cells with
       # the default being at the bottom. Increasing `x` moves the glyph to the right,
       # increasing `y` moves the glyph upwards.
       #glyph_offset:
       #  x: 0
       #  y: 0

       # Thin stroke font rendering (macOS only)
       #
       # Thin strokes are suitable for retina displays, but for non-retina screens
       # it is recommended to set `use_thin_strokes` to `false`
       #
       # macOS >= 10.14.x:
       #
       # If the font quality on non-retina display looks bad then set
       # `use_thin_strokes` to `true` and enable font smoothing by running the
       # following command:
       #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
       #
       # This is a global setting and will require a log out or restart to take
       # effect.
       #use_thin_strokes: true

     # If `true`, bold text is drawn using the bright color variants.
     #draw_bold_text_with_bright_colors: false

     # Colors (Tomorrow Night Bright)
     #colors:
       # Default colors
       #primary:
       #  background: '#000000'
       #  foreground: '#eaeaea'

         # Bright and dim foreground colors
         #
         # The dimmed foreground color is calculated automatically if it is not present.
         # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
         # is `false`, the normal foreground color will be used.
         #dim_foreground: '#9a9a9a'
         #bright_foreground: '#ffffff'

       # Cursor colors
       #
       # Colors which should be used to draw the terminal cursor. If these are unset,
       # the cursor color will be the inverse of the cell color.
       #cursor:
       #  text: '#000000'
       #  cursor: '#ffffff'

       # Selection colors
       #
       # Colors which should be used to draw the selection area. If selection
       # background is unset, selection color will be the inverse of the cell colors.
       # If only text is unset the cell text color will remain the same.
       #selection:
       #  text: '#eaeaea'
       #  background: '#404040'

       # Normal colors
       #normal:
       #  black:   '#000000'
       #  red:     '#d54e53'
       #  green:   '#b9ca4a'
       #  yellow:  '#e6c547'
       #  blue:    '#7aa6da'
       #  magenta: '#c397d8'
       #  cyan:    '#70c0ba'
       #  white:   '#eaeaea'

       # Bright colors
       #bright:
       #  black:   '#666666'
       #  red:     '#ff3334'
       #  green:   '#9ec400'
       #  yellow:  '#e7c547'
       #  blue:    '#7aa6da'
       #  magenta: '#b77ee0'
       #  cyan:    '#54ced6'
       #  white:   '#ffffff'

       # Dim colors
       #
       # If the dim colors are not set, they will be calculated automatically based
       # on the `normal` colors.
       #dim:
       #  black:   '#000000'
       #  red:     '#8c3336'
       #  green:   '#7a8530'
       #  yellow:  '#97822e'
       #  blue:    '#506d8f'
       #  magenta: '#80638e'
       #  cyan:    '#497e7a'
       #  white:   '#9a9a9a'

       # Indexed Colors
       #
       # The indexed colors include all colors from 16 to 256.
       # When these are not set, they're filled with sensible defaults.
       #
       # Example:
       #   `- { index: 16, color: '#ff00ff' }`
       #
       #indexed_colors: []

     # # Colors (Tomorrow Night Bright)
     # colors:
     #   # Default colors
     #   primary:
     #     background: '0x000000'
     #     foreground: '0xeaeaea'

     #   # Normal colors
     #   normal:
     #     black:   '0x000000'
     #     red:     '0xd54e53'
     #     green:   '0xb9ca4a'
     #     yellow:  '0xe6c547'
     #     blue:    '0x7aa6da'
     #     magenta: '0xc397d8'
     #     cyan:    '0x70c0ba'
     #     white:   '0x424242'

     #   # Bright colors
     #   bright:
     #     black:   '0x666666'
     #     red:     '0xff3334'
     #     green:   '0x9ec400'
     #     yellow:  '0xe7c547'
     #     blue:    '0x7aa6da'
     #     magenta: '0xb77ee0'
     #     cyan:    '0x54ced6'
     #     white:   '0x2a2a2a'

     # # Colors (Tomorrow Day)
     # colors:
     #   # Default colors
     #   primary:
     #     background: '0xffffff'
     #     foreground: '0x4d4d4c'

     #   # Normal colors
     #   normal:
     #     black:   '0x000000'
     #     red:     '0xc82829'
     #     green:   '0x718c00'
     #     yellow:  '0xeab700'
     #     blue:    '0x4271ae'
     #     magenta: '0x8959a8'
     #     cyan:    '0x3e999f'
     #     white:   '0xefefef'

     #   # Bright colors
     #   bright:
     #     black:   '0x000000'
     #     red:     '0xc82829'
     #     green:   '0x9ec400'
     #     yellow:  '0xeab700'
     #     blue:    '0x4271ae'
     #     magenta: '0x8959a8'
     #     cyan:    '0x3e999f'
     #     white:   '0xefefef'



     # Copyright (c) 2017-present Arctic Ice Studio <development@arcticicestudio.com>
     # Copyright (c) 2017-present Sven Greb <code@svengreb.de>

     # Project:    Nord Alacritty
     # Version:    0.1.0
     # Repository: https://github.com/arcticicestudio/nord-alacritty
     # License:    MIT
     # References:
     #   https://github.com/alacritty/alacritty

     colors:
       primary:
         background: '#2e3440'
         foreground: '#d8dee9'
         dim_foreground: '#a5abb6'
       cursor:
         text: '#2e3440'
         cursor: '#d8dee9'
       vi_mode_cursor:
         text: '#2e3440'
         cursor: '#d8dee9'
       selection:
         text: CellForeground
         background: '#4c566a'
       search:
         matches:
           foreground: CellBackground
           background: '#88c0d0'
         bar:
           background: '#434c5e'
           foreground: '#d8dee9'
       normal:
         black: '#3b4252'
         red: '#bf616a'
         green: '#a3be8c'
         yellow: '#ebcb8b'
         blue: '#81a1c1'
         magenta: '#b48ead'
         cyan: '#88c0d0'
         white: '#e5e9f0'
       bright:
         black: '#4c566a'
         red: '#bf616a'
         green: '#a3be8c'
         yellow: '#ebcb8b'
         blue: '#81a1c1'
         magenta: '#b48ead'
         cyan: '#8fbcbb'
         white: '#eceff4'
       dim:
         black: '#373e4d'
         red: '#94545d'
         green: '#809575'
         yellow: '#b29e75'
         blue: '#68809a'
         magenta: '#8c738c'
         cyan: '#6d96a5'
         white: '#aeb3bb'



     # Visual Bell
     #
     # Any time the BEL code is received, Alacritty "rings" the visual bell. Once
     # rung, the terminal background will be set to white and transition back to the
     # default background color. You can control the rate of this transition by
     # setting the `duration` property (represented in milliseconds). You can also
     # configure the transition function by setting the `animation` property.
     #
     # Values for `animation`:
     #   - Ease
     #   - EaseOut
     #   - EaseOutSine
     #   - EaseOutQuad
     #   - EaseOutCubic
     #   - EaseOutQuart
     #   - EaseOutQuint
     #   - EaseOutExpo
     #   - EaseOutCirc
     #   - Linear
     #
     # Specifying a `duration` of `0` will disable the visual bell.
     #visual_bell:
     #  animation: EaseOutExpo
     #  duration: 0
     #  color: '#ffffff'

     #selection:
       #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

       # When set to `true`, selected text will be copied to the primary clipboard.
       #save_to_clipboard: false

     # Allow terminal applications to change Alacritty's window title.
     #dynamic_title: true

     cursor:
       # Cursor style
       style:
         # Cursor shape
         #
         # Values for `shape`:
         #   - ▇ Block
         #   - _ Underline
         #   - | Beam
         shape: Block

         # Cursor blinking state
         #
         # Values for `blinking`:
         #   - Never: Prevent the cursor from ever blinking
         #   - Off: Disable blinking by default
         #   - On: Enable blinking by default
         #   - Always: Force the cursor to always blink
         blinking: On

       # If this is `true`, the cursor will be rendered as a hollow box when the
       # window is not focused.
       unfocused_hollow: true

       # Vi mode cursor style
       #
       # If the vi mode cursor style is `None` or not specified, it will fall back to
       # the style of the active value of the normal cursor.
       #
       # See `cursor.style` for available options.
       #vi_mode_style: None

       # Cursor blinking interval in milliseconds.
       #blink_interval: 750

     # Live config reload (changes require restart)
     #live_config_reload: true

     # Shell
     #
     # You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
     # Entries in `shell.args` are passed unmodified as arguments to the shell.
     #
     # Default:
     #   - (macOS) /bin/bash --login
     #   - (Linux/BSD) user login shell
     #   - (Windows) powershell
     #shell:
     #  program: /bin/bash
     #  args:
     #    - --login

     # Startup directory
     #
     # Directory the shell is started in. If this is unset, or `None`, the working
     # directory of the parent process will be used.
     #working_directory: None

     # WinPTY backend (Windows only)
     #
     # Alacritty defaults to using the newer ConPTY backend if it is available,
     # since it resolves a lot of bugs and is quite a bit faster. If it is not
     # available, the the WinPTY backend will be used instead.
     #
     # Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
     # even if the ConPTY backend is available.
     #winpty_backend: false

     # Send ESC (\x1b) before characters when alt is pressed.
     #alt_send_esc: true

     #mouse:
       # Click settings
       #
       # The `double_click` and `triple_click` settings control the time
       # alacritty should wait for accepting multiple clicks as one double
       # or triple click.
       #double_click: { threshold: 300 }
       #triple_click: { threshold: 300 }

       # If this is `true`, the cursor is temporarily hidden when typing.
       #hide_when_typing: false

       #url:
         # URL launcher
         #
         # This program is executed when clicking on a text which is recognized as a URL.
         # The URL is always added to the command as the last parameter.
         #
         # When set to `None`, URL launching will be disabled completely.
         #
         # Default:
         #   - (macOS) open
         #   - (Linux/BSD) xdg-open
         #   - (Windows) explorer
         #launcher:
         #  program: xdg-open
         #  args: []

         # URL modifiers
         #
         # These are the modifiers that need to be held down for opening URLs when clicking
         # on them. The available modifiers are documented in the key binding section.
         #modifiers: None

     # Mouse bindings
     #
     # Mouse bindings are specified as a list of objects, much like the key
     # bindings further below.
     #
     # To trigger mouse bindings when an application running within Alacritty captures the mouse, the
     # `Shift` modifier is automatically added as a requirement.
     #
     # Each mouse binding will specify a:
     #
     # - `mouse`:
     #
     #   - Middle
     #   - Left
     #   - Right
     #   - Numeric identifier such as `5`
     #
     # - `action` (see key bindings)
     #
     # And optionally:
     #
     # - `mods` (see key bindings)
     #mouse_bindings:
     #  - { mouse: Middle, action: PasteSelection }

     # Key bindings
     #
     # Key bindings are specified as a list of objects. For example, this is the
     # default paste binding:
     #
     # `- { key: V, mods: Control|Shift, action: Paste }`
     #
     # Each key binding will specify a:
     #
     # - `key`: Identifier of the key pressed
     #
     #    - A-Z
     #    - F1-F24
     #    - Key0-Key9
     #
     #    A full list with available key codes can be found here:
     #    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
     #
     #    Instead of using the name of the keys, the `key` field also supports using
     #    the scancode of the desired key. Scancodes have to be specified as a
     #    decimal number. This command will allow you to display the hex scancodes
     #    for certain keys:
     #
     #       `showkey --scancodes`.
     #
     # Then exactly one of:
     #
     # - `chars`: Send a byte sequence to the running application
     #
     #    The `chars` field writes the specified string to the terminal. This makes
     #    it possible to pass escape sequences. To find escape codes for bindings
     #    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
     #    of tmux. Note that applications use terminfo to map escape sequences back
     #    to keys. It is therefore required to update the terminfo when changing an
     #    escape sequence.
     #
     # - `action`: Execute a predefined action
     #
     #   - Copy
     #   - Paste
     #   - PasteSelection
     #   - IncreaseFontSize
     #   - DecreaseFontSize
     #   - ResetFontSize
     #   - ScrollPageUp
     #   - ScrollPageDown
     #   - ScrollLineUp
     #   - ScrollLineDown
     #   - ScrollToTop
     #   - ScrollToBottom
     #   - ClearHistory
     #   - Hide
     #   - Minimize
     #   - Quit
     #   - ToggleFullscreen
     #   - SpawnNewInstance
     #   - ClearLogNotice
     #   - ReceiveChar
     #   - None
     #
     #   (macOS only):
     #   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
     #
     # - `command`: Fork and execute a specified command plus arguments
     #
     #    The `command` field must be a map containing a `program` string and an
     #    `args` array of command line parameter strings. For example:
     #       `{ program: "alacritty", args: ["-e", "vttest"] }`
     #
     # And optionally:
     #
     # - `mods`: Key modifiers to filter binding actions
     #
     #    - Command
     #    - Control
     #    - Option
     #    - Super
     #    - Shift
     #    - Alt
     #
     #    Multiple `mods` can be combined using `|` like this:
     #       `mods: Control|Shift`.
     #    Whitespace and capitalization are relevant and must match the example.
     #
     # - `mode`: Indicate a binding for only specific terminal reported modes
     #
     #    This is mainly used to send applications the correct escape sequences
     #    when in different modes.
     #
     #    - AppCursor
     #    - AppKeypad
     #    - Alt
     #
     #    A `~` operator can be used before a mode to apply the binding whenever
     #    the mode is *not* active, e.g. `~Alt`.
     #
     # Bindings are always filled by default, but will be replaced when a new
     # binding with the same triggers is defined. To unset a default binding, it can
     # be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
     # a no-op if you do not wish to receive input characters for that binding.
     #
     # If the same trigger is assigned to multiple actions, all of them are executed
     # at once.
     #key_bindings:
       # (Windows, Linux, and BSD only)
       #- { key: V,        mods: Control|Shift, action: Paste            }
       #- { key: C,        mods: Control|Shift, action: Copy             }
       #- { key: Insert,   mods: Shift,         action: PasteSelection   }
       #- { key: Key0,     mods: Control,       action: ResetFontSize    }
       #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
       #- { key: Add,      mods: Control,       action: IncreaseFontSize }
       #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
       #- { key: Minus,    mods: Control,       action: DecreaseFontSize }

       # (Windows only)
       #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

       # (macOS only)
       #- { key: Key0,   mods: Command,         action: ResetFontSize    }
       #- { key: Equals, mods: Command,         action: IncreaseFontSize }
       #- { key: Add,    mods: Command,         action: IncreaseFontSize }
       #- { key: Minus,  mods: Command,         action: DecreaseFontSize }
       #- { key: K,      mods: Command,         action: ClearHistory     }
       #- { key: K,      mods: Command,         chars: "\x0c"            }
       #- { key: V,      mods: Command,         action: Paste            }
       #- { key: C,      mods: Command,         action: Copy             }
       #- { key: H,      mods: Command,         action: Hide             }
       #- { key: M,      mods: Command,         action: Minimize         }
       #- { key: Q,      mods: Command,         action: Quit             }
       #- { key: W,      mods: Command,         action: Quit             }
       #- { key: F,      mods: Command|Control, action: ToggleFullscreen }

       #- { key: Paste,                    action: Paste                            }
       #- { key: Copy,                     action: Copy                             }
       #- { key: L,         mods: Control, action: ClearLogNotice                   }
       #- { key: L,         mods: Control, chars: "\x0c"                            }
       #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
       #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
       #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
       #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }

     #debug:
       # Display the time it takes to redraw each frame.
       #render_timer: false

       # Keep the log file after quitting Alacritty.
       #persistent_logging: false

       # Log level
       #
       # Values for `log_level`:
       #   - None
       #   - Error
       #   - Warn
       #   - Info
       #   - Debug
       #   - Trace
       #log_level: Warn

       # Print all received window events.
       #print_events: false
   #+END_SRC

* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

   #+BEGIN_SRC gitconfig
     [user]
             name = Kris
             email = krismolendyke@users.noreply.github.com
             useconfigonly = true
     [color]
             ui = auto
     [core]
             excludesfile = ~/.gitignore-global
             whitespace = -trailing-space,-space-before-tab
             editor = emacsclient
     [apply]
             whitespace = nowarn
     [alias]
             diff = diff --color-moved
             stache = stash
             st = status -sb
             a = add -p
             l = log --color-moved --stat --no-merges
             lp = log --color-moved --patch --stat --no-merges
             wlp = log --color-moved --patch --stat --color-words --no-merges
             lo = log --color-moved --oneline --decorate --no-merges
             lf = log --color-moved --pretty=format: --name-only -z --max-count 1 --no-merges
             co = checkout
             br = branch -vv
             wdiff = diff --color-moved --color-words
             ds = diff --color-moved --staged
     [advice]
             statusHints = true
     [rebase]
             autosquash = true
     [diff]
             algorithm = histogram
             compactionHeuristic = 1
             colorMoved = zebra
     [help]
             autocorrect = 1
     [pager]
             diff = diff-so-fancy | less
             log = diff-so-fancy | less
             show = diff-so-fancy | less
     [pull]
             rebase = false
     [init]
             defaultBranch = main
     [credential]
             helper = cache --timeout=3600
     [tag]
             sort = version:refname
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/Linux.gitignore #
     ##########################################################################

     ,*~

     # temporary files which can be created if a process still has a handle open of a deleted file
     .fuse_hidden*

     # KDE directory preferences
     .directory

     # Linux trash folder which might appear on any partition or disk
     .Trash-*

     # .nfs files are created when an open file is removed but is still being accessed
     .nfs*


     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/macOS.gitignore #
     ##########################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk


     ##############################################################################
     # Below from:                                                                #
     #                                                                            #
     # https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore #
     ##############################################################################

     # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
     # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

     # User-specific stuff
     .idea/**/workspace.xml
     .idea/**/tasks.xml
     .idea/**/usage.statistics.xml
     .idea/**/dictionaries
     .idea/**/shelf

     # Generated files
     .idea/**/contentModel.xml

     # Sensitive or high-churn files
     .idea/**/dataSources/
     .idea/**/dataSources.ids
     .idea/**/dataSources.local.xml
     .idea/**/sqlDataSources.xml
     .idea/**/dynamic.xml
     .idea/**/uiDesigner.xml
     .idea/**/dbnavigator.xml

     # Gradle
     .idea/**/gradle.xml
     .idea/**/libraries

     # Gradle and Maven with auto-import
     # When using Gradle or Maven with auto-import, you should exclude module files,
     # since they will be recreated, and may cause churn.  Uncomment if using
     # auto-import.
     .idea/modules.xml
     .idea/*.iml
     .idea/modules

     # CMake
     cmake-build-*/

     # Mongo Explorer plugin
     .idea/**/mongoSettings.xml

     # File-based project format
     ,*.iws

     # IntelliJ
     out/

     # mpeltonen/sbt-idea plugin
     .idea_modules/

     # JIRA plugin
     atlassian-ide-plugin.xml

     # Cursive Clojure plugin
     .idea/replstate.xml

     # Crashlytics plugin (for Android Studio and IntelliJ)
     com_crashlytics_export_strings.xml
     crashlytics.properties
     crashlytics-build.properties
     fabric.properties

     # Editor-based Rest Client
     .idea/httpRequests

     # Android studio 3.1+ serialized cache file
     .idea/caches/build_file_checksums.ser
   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt
   :END:

   Use [[https://www.kennethreitz.org/essays/a-better-pip-workflow][A Better Pip Workflow™]] to specify packages that I do actually
   want installed to the user's packages.

   #+BEGIN_SRC python
     # User packages
     http-prompt
     keyring
     pipdeptree[graphviz]
     twine
     virtualenvwrapper
   #+END_SRC

* =ripgrep=
   :PROPERTIES:
   :header-args: :tangle ~/.ripgreprc
   :END:

  See =RIPGREP_CONFIG_PATH= above.

  #+BEGIN_SRC sh
    --sort-files
  #+END_SRC

* SSH

  Create a configuration directory:

  #+BEGIN_SRC sh
    mkdir -p ${HOME}/.ssh/config.d
  #+END_SRC

** =config=
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config
   :END:

   #+BEGIN_SRC conf
     ServerAliveCountMax 5
     ServerAliveInterval 60

     Host *
	 IdentityAgent ~/.1password/agent.sock

     Include ~/.ssh/config.d/*
   #+END_SRC
