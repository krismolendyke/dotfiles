#+TITLE: dotfiles
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: showall

A collection of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] dotfiles created and maintained
in [[http://www.gnu.org/software/emacs/][Emacs]] with [[http://orgmode.org/][Org mode.]]

#+TOC: headlines 3

* Prerequisites

  #+BEGIN_SRC sh
    mkdir -p ~/.bashrc.d/secret
    # TODO: fix the fact that something below this needs a file to exist in the secrets dir
    mkdir -p ~/.ssh/config
  #+END_SRC

* Build Configuration Files

  Open this Org document in Emacs and [[http://orgmode.org/manual/tangle.html#tangle][tangle]] it (=C-c C-v t=).
  Configuration files, e.g., =.bashrc=, will be generated.

** OS

   OS specific configuration is currently split out into the following
   distinct files:

   - =linux.org=
   - =macos.org=

   Tangling of those files must be done manually on the correct
   system.

* Shell

** Change Default Shell

   For macOS this should be the Homebrew installed =bash= /not/ the
   system =bash= path.

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/bash
     export SHELL=/usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     echo ${SHELL}
   #+END_SRC

   On macOS:

   #+BEGIN_SRC sh
     sudo dscl . -create ${HOME} UserShell /usr/local/bin/bash
   #+END_SRC

   #+BEGIN_SRC sh
     dscl . -read ${HOME} UserShell
   #+END_SRC

   Make the Bash configuration directory:

   #+BEGIN_SRC sh
     mkdir -p "${HOME}/.bashrc.d"
   #+END_SRC

** =.inputrc=
   :PROPERTIES:
   :header-args: :tangle ~/.inputrc
   :END:

   #+BEGIN_SRC sh
     set bell-style none
     set colored-completion-prefix on
     set colored-stats on
     set completion-ignore-case off
     set convert-meta off
     set expand-tilde on
     set input-meta on
     set output-meta on
     set show-all-if-ambiguous on
     set visible-stats on
   #+END_SRC

** =.bash_profile=
   :PROPERTIES:
   :header-args: :tangle ~/.bash_profile
   :END:

   #+BEGIN_SRC sh
     source "${HOME}/.bashrc"
   #+END_SRC

** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc
   :END:

   Load all configuration:

   #+BEGIN_SRC sh
     for f in "${HOME}/.bashrc.d/"*.bash; do
         source "${f}"
     done
     unset -v config
   #+END_SRC

** Custom
   :PROPERTIES:
   :header-args: :tangle ~/.bashrc.d/main.bash
   :END:

   Interactive shell options.

*** Secret Information

    Define a directory to keep secret information in.  Make sure that it exists
    in [[https://github.com/krismolendyke/.zsh/blob/master/.gitignore][=.gitignore=]].

    #+BEGIN_SRC sh
      export K20E_SECRET_HOME=${HOME}/.bashrc.d/secret
    #+END_SRC

    Create it if necessary.

    #+BEGIN_SRC sh
      mkdir -p ${K20E_SECRET_HOME}
    #+END_SRC

    Adjust permissions.

    #+BEGIN_SRC sh
      chmod 0700 ${K20E_SECRET_HOME}
      chmod -Rf 0600 ${K20E_SECRET_HOME}/*.sh
    #+END_SRC

    Define files to =source= in the following sections.

    #+BEGIN_SRC sh
      export K20E_SECRET_VARIABLES=${K20E_SECRET_HOME}/variables.sh
      export K20E_SECRET_ALIASES=${K20E_SECRET_HOME}/aliases.sh
      export K20E_SECRET_PATH=${K20E_SECRET_HOME}/path.sh
      export K20E_SECRET_FUNCTIONS=${K20E_SECRET_HOME}/functions.sh
    #+END_SRC

*** Options

    #+BEGIN_SRC sh
      shopt -s \
            autocd \
            cdspell \
            checkjobs \
            checkwinsize \
            dirspell \
            histappend \
            no_empty_cmd_completion
    #+END_SRC

*** Variables

    Bash variables.

    #+BEGIN_SRC sh
      LANG=en_US.UTF-8

      HISTSIZE=100000
      HISTCONTROL=erasedups
      HISTTIMEFORMAT='%F %T '
    #+END_SRC

    Base variables that I use to organize the file system.

    #+BEGIN_SRC sh
      export CODE_HOME=${HOME}/code
      export GOOGLE=${HOME}/Google
    #+END_SRC

    File system variables.

    #+BEGIN_SRC sh
      if [ -d "${HOME}/.cargo" ]; then
          export CARGO_HOME=${HOME}/.cargo
      fi

      # https://github.com/rust-lang-nursery/rustfmt#tips
      if [[ -x ${CARGO_HOME}/bin/rustc ]]; then
          export DYLD_LIBRARY_PATH=$(${CARGO_HOME}/bin/rustc --print sysroot)/lib:${DYLD_LIBRARY_PATH}
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export VLC_HOME=/Applications/VLC.app/Contents/MacOS
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export HOMEBREW_CASK_HOME=/usr/local/Caskroom
          export HOMEBREW_CELLAR=$(/usr/local/bin/brew --cellar)
          export HOMEBREW_INSTALL_CLEANUP=1
      fi

      if [[ -x jenv ]]; then
          export JENV_HOME=${HOME}/.jenv
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          export MANPATH=/usr/local/share/man:${MANPATH}
          export NODE_PATH=/usr/local/lib/node_modules:${NODE_PATH}
      fi
    #+END_SRC

    Non file system variables.

    #+BEGIN_SRC sh
      export EDITOR=emacsclient
      export LANG=en_US.UTF-8
      export TERM=xterm-256color
    #+END_SRC

    #+BEGIN_QUOTE
    ... use the =-u/--unquoted= option to specify that any result that
    is a string will be printed without quotes. ... If this is a
    common enough occurance for you, you can set the =JP_UNQUOTED=
    environment variable to make this the default behavior

    -- https://github.com/jmespath/jp

    #+END_QUOTE

    #+BEGIN_SRC sh
      export JP_UNQUOTED=true
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_VARIABLES} ]; then
          source ${K20E_SECRET_VARIABLES}
      fi
    #+END_SRC

    https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file

    #+BEGIN_SRC sh
      export RIPGREP_CONFIG_PATH=${HOME}/.ripgreprc
    #+END_SRC

*** =CDPATH=

    #+BEGIN_QUOTE
    The =cdpath= variable sets the search path for the cd command. If
    you do not specify =.= somewhere in the path, it is assumed to be
    the first component.
    #+END_QUOTE

    #+BEGIN_SRC sh
      export CDPATH="${CODE_HOME}:${GOOGLE}"
    #+END_SRC

*** =PATH=

    #+BEGIN_SRC sh
      pathmunge () {
          case ":${PATH}:" in
              ,*:"$1":*)
                  ;;
              ,*)
                  if [ "$2" = "after" ] ; then
                      PATH=$PATH:$1
                  else
                      PATH=$1:$PATH
                  fi
          esac
      }
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -v ${JENV_HOME} ]; then
          pathmunge "${JENV_HOME}/bin"
      fi

      pathmunge /usr/local/sbin
      pathmunge /usr/local/bin
      pathmunge "${HOME}/bin"

      if [ -v ${CARGO_HOME} ]; then
          pathmunge "${CARGO_HOME}/bin"
      fi

      if [ -v ${VLC_HOME} ]; then
          pathmunge "${VLC_HOME}"
      fi

      if [[ "$OSTYPE" == darwin* ]]; then
          pathmunge /usr/local/opt/python/libexec/bin
          pathmunge "$(/usr/local/bin/brew --prefix git)/share/git-core/contrib/diff-highlight"
      fi

      if [[ -x /usr/share/doc/git/contrib/diff-highlight ]]; then
          pathmunge /usr/share/doc/git/contrib/diff-highlight
      fi

      if [[ -x /bin/go ]]; then
          pathmunge /bin/go/bin
          pathmunge "$(/bin/go env GOPATH)/bin"
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_PATH} ]; then
          source ${K20E_SECRET_PATH}
      fi
    #+END_SRC

*** =.dir_colors=

    https://www.nordtheme.com/docs/ports/dircolors

    #+BEGIN_SRC sh
      [ -e "${HOME}/.dir_colors" ] && eval $(dircolors "${HOME}/.dir_colors")
    #+END_SRC

*** jEnv

    For managing multiple Java installations.

    #+BEGIN_SRC sh
      if [[ -x jenv ]]; then
          eval "$(jenv init -)"
      fi
    #+END_SRC

*** [[https://www.nomadproject.io/][Nomad]]

    #+BEGIN_SRC sh
      [ -x /usr/bin/nomad ] && complete -C /usr/bin/nomad nomad
    #+END_SRC

*** [[https://github.com/nvm-sh/nvm][nvm]]

    For managing multiple ... Node installations.  Installed [[https://aur.archlinux.org/packages/nvm/][from AUR]].

    #+BEGIN_SRC sh
      [ -e /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh
    #+END_SRC

*** =PYTHON_USER_BASE=

    Add Python =site.USER_BASE= for user site-packages and =pip
    install --user= installations.

    - https://docs.python.org/3/install/index.html#inst-alt-install-user

    #+BEGIN_SRC sh
      export PYTHON_USER_BASE=$(python -m site --user-base)
      pathmunge "${PYTHON_USER_BASE}/bin"
    #+END_SRC

*** =PROMPT_COMMAND=

    #+BEGIN_SRC sh
      [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ] && source /usr/local/etc/bash_completion.d/git-prompt.sh

      GIT_PS1_SHOWCOLORHINTS=1
      GIT_PS1_SHOWDIRTYSTATE=1
      GIT_PS1_SHOWUNTRACKEDFILES=1
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_working_directory() {
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          echo "${YELLOW}\w${RESET}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_virtual_env() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}p${YELLOW}y${RESET} "
          declare -r SUFFIX=" ${RESET}"
          local value=''
          if [ -n "${VIRTUAL_ENV}" ] && [ -d "${VIRTUAL_ENV}" ]; then
              value=$(basename "${VIRTUAL_ENV}")
              value="${PREFIX}${value}${SUFFIX}"
          fi
          echo "${value}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_gcp_project() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RED='\[\e[0;31m\]'
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}g${RED}c${YELLOW}p${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if [ -e ${HOME}/.config/gcloud/active_config ]; then
              value=$(cat ${HOME}/.config/gcloud/active_config)
              if [[ "${value}" =~ .*prod.* ]]; then
                  value="${RED_BG}${value}"
              fi
              if [[ "${value}" =~ .*apac.* ]]; then
                  value="${RED_BG}${value}"
              fi
              value="${PREFIX}${value}${SUFFIX}"
          fi
          echo "${value}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_aws_profile() {
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${YELLOW}aws${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if [[ -v AWS_PROFILE ]]; then
              value="${AWS_PROFILE}"
          else
              value="∅"
          fi
          if [[ "${value}" =~ .*prod.* ]]; then
              value="${RED_BG}${value}"
          fi
          if [[ "${value}" =~ .*apac.* ]]; then
              value="${RED_BG}${value}"
          fi
          if [[ "${value}" =~ .*stage.* ]]; then
              value="${YELLOW}${value}"
          fi
          echo "${PREFIX}${value}${SUFFIX}"
      }
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_kubectx() {
          declare -r BLUE='\[\e[0;34m\]'
          declare -r RED_BG='\[\e[0;41m\]'
          declare -r YELLOW='\[\e[0;33m\]'
          declare -r RESET='\[\e[0m\]'
          declare -r PREFIX="${BLUE}k8s${RESET} "
          declare -r SUFFIX="${RESET} "
          local value=''
          if command -v k > /dev/null 2>&1; then
              value=$(k config view --output go-template='{{ index . "current-context" }}')
              fullname=${value}
              if [[ "${value}" =~ ^arn ]]; then
                  value=$(echo "${value}" | cut -d / -f 2)
              fi
              value="${value}${RESET}·$(k config view -o=jsonpath="{.contexts[?(@.name==\"${fullname}\")].context.namespace}")"
              if [[ "${value}" =~ .*prod.* ]]; then
                  value="${RED_BG}${value}"
              fi
              if [[ "${value}" =~ .*apac.* ]]; then
                  value="${RED_BG}${value}"
              fi
              if [[ "${value}" =~ .*stage.* ]]; then
                  value="${YELLOW}${value}"
              fi
              value="${PREFIX}${value}${SUFFIX}"
          fi
          echo "${value}"
      }
    #+END_SRC

    For Ubuntu, I had to copy [[https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh][git-prompt.sh]] to
    =/usr/share/bash-completion/completions/=.

    #+BEGIN_SRC sh
      [ -e /usr/share/git/completion/git-prompt.sh ] && source //usr/share/git/completion/git-prompt.sh

      PROMPT_COMMAND='__git_ps1 \
      "\n$(k20e_aws_profile)$(k20e_kubectx)$(k20e_virtual_env)\n$(k20e_working_directory)" \
      "\n\$ " \
      " %s"'
    #+END_SRC

*** Aliases

    #+BEGIN_SRC sh
      alias ..="cd ../"
      alias ...="cd ../../"
      alias ....="cd ../../.."
      alias dirs="dirs -v"
      alias emacs="/usr/bin/emacs --no-window-system"
      alias emacsclient="/usr/bin/emacsclient --no-wait"
      alias ec="emacsclient"
      alias g="git"
      alias j="jobs -l"
      alias k="kubectl"
      alias l.l='ls -1A | grep "^\." | xargs ls -lhGF'
      alias ll="ls --color=always -lhF"
      alias lll="ll --color=always"
      alias ls="ls --color=always -GF"
      alias l="ls --color=always"
      alias tree="tree -C"

      if [[ "$OSTYPE" == darwin* ]]; then
          alias brewdump="brew bundle dump --force --global --verbose && pbcopy < ${HOME}/.Brewfile"
          alias top="top -ocpu -Orsize"
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_ALIASES} ]; then
          source ${K20E_SECRET_ALIASES}
      fi
    #+END_SRC

**** =ssh TERM=

     My Emacs =multi-term= with =bash= has =TERM=xterm-256color=.  On
     many remote hosts, primarily Amazon Linux, any =xterm= sets
     =PROMPT_COMMAND= and garbles the prompt by attempting to set the
     window title.  =/etc/bashrc= usually contains something like
     this:

     #+BEGIN_EXAMPLE
       if [ -z "$PROMPT_COMMAND" ]; then
         case $TERM in
         xterm*)
             if [ -e /etc/sysconfig/bash-prompt-xterm ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-xterm
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         screen)
             if [ -e /etc/sysconfig/bash-prompt-screen ]; then
                 PROMPT_COMMAND=/etc/sysconfig/bash-prompt-screen
             else
                 PROMPT_COMMAND='printf "\033]0;%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
             fi
             ;;
         ,*)
             [ -e /etc/sysconfig/bash-prompt-default ] && PROMPT_COMMAND=/etc/sysconfig/bash-prompt-default
             ;;
           esac
       fi
     #+END_EXAMPLE

     Hacking that to some other reasonable value avoids prompt
     garbling and muscle memory typing =unset PROMPT_COMMAND=.

     #+BEGIN_SRC sh
       alias ssh="TERM=ansi ssh"
     #+END_SRC

*** Completions

    [2020-09-05 Sat]

    For Arch need to update to https://wiki.archlinux.org/index.php/Bash#Tab_completion.

    #+BEGIN_SRC sh
      [ -e /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion
      [ -e /etc/bash_completion ] && source /etc/bash_completion
    #+END_SRC

**** =kubectl=, =k=, =kctx=, =kns=

     Using MicroK8s in Ubuntu at the moment.

     Instead of =snap= below, maybe =microk8s.status --yaml= parsing?

     #+BEGIN_SRC sh
     #+END_SRC

     macOS completion with completion for my =k= alias:

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/kubectl ] && source /usr/share/bash-completion/completions/kubectl && complete -o default -F __start_kubectl k
     #+END_SRC

     Install [[https://github.com/ahmetb/kubectx][kubectx]] (via [[#brewfile][=${HOME}/.Brewfile=]]), completion for helper
     tools =kctx=, =kns=:

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/kubectx ] && source /usr/share/bash-completion/completions/kubectx && alias kctx="kubectx"
       [ -e /usr/share/bash-completion/completions/kubens ] && source /usr/share/bash-completion/completions/kubens && alias kns="kubens"
     #+END_SRC

     Linux =kubectx= install manually, completion to =pkg-config
     --variable=completionsdir bash-completion= dir.

     #+BEGIN_SRC sh
     #+END_SRC

     Change currently selected color:

     #+BEGIN_SRC sh
       export KUBECTX_CURRENT_FGCOLOR=$(tput setaf 2)
     #+END_SRC

**** Git

     #+BEGIN_SRC sh
       [ -e /usr/local/etc/bash_completion.d/git-completion.bash ] && source /usr/local/etc/bash_completion.d/git-completion.bash
       [ -e /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git
     #+END_SRC

     Add completion for my muscle memory alias of =g= for =git=:

     #+BEGIN_SRC sh
        __git_complete g __git_main
     #+END_SRC

**** =systemd=

     #+BEGIN_SRC sh
       [ -e /usr/share/bash-completion/completions/systemctl ] && source /usr/share/bash-completion/completions/systemctl
     #+END_SRC

*** Functions

    #+BEGIN_SRC sh
      if [ -f ${K20E_SECRET_FUNCTIONS} ]; then
          source ${K20E_SECRET_FUNCTIONS}
      fi
    #+END_SRC

    #+BEGIN_SRC sh
      function k20e_exif_strip() {
          local path="$1"

          if [ ! -e "${path}" ]; then
              echo "Image at path \"${path}\" does not exist"
              return
          fi

          echo "Before:"
          echo
          identify -verbose "${path}" | rg exif

          mogrify -strip "${path}"

          echo
          echo "After:"
          echo
          identify -verbose "${path}" | rg exif
      }
    #+END_SRC

*** AWS CLI

    #+BEGIN_SRC sh
      complete -C '/usr/bin/aws_completer' aws
    #+END_SRC

*** Google Cloud SDK

    Completion:

    #+BEGIN_SRC sh
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc
      [ -e ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc ] && source ${HOMEBREW_CASK_HOME}/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc
    #+END_SRC

*** Python
    :PROPERTIES:
    :CUSTOM_ID: functions-python
    :END:

    #+BEGIN_SRC sh
      function k20e-pip-upgrade() {
          if [[ $(which deactivate) == "deactivate: function" && -n ${VIRTUAL_ENV} ]]; then
              echo "Deactivating current virtual environment ${VIRTUAL_ENV}"
              deactivate
          fi
          pip install --user --upgrade --requirement ${HOME}/requirements-to-freeze.txt
          pip freeze > ${HOME}/requirements.txt
      }
    #+END_SRC

*** [[https://github.com/alloy/terminal-notifier][terminal-notifier]]

    #+BEGIN_SRC sh
      if [ -e "/Applications/terminal-notifier.app" ]; then
          alias notify="/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier"
      fi
    #+END_SRC

* [[https://git-scm.com/][Git]]

** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

   #+BEGIN_SRC gitconfig
     [user]
             name = Kris
             email = krismolendyke@users.noreply.github.com
             useconfigonly = true
     [color]
             ui = auto
     [core]
             excludesfile = ~/.gitignore-global
             whitespace = -trailing-space,-space-before-tab
             editor = emacsclient
     [apply]
             whitespace = nowarn
     [alias]
             diff = diff --color-moved
             stache = stash
             st = status -sb
             a = add -p
             l = log --color-moved --stat --no-merges
             lp = log --color-moved --patch --stat --no-merges
             wlp = log --color-moved --patch --stat --color-words --no-merges
             lo = log --color-moved --oneline --decorate --no-merges
             lf = log --color-moved --pretty=format: --name-only -z --max-count 1 --no-merges
             co = checkout
             br = branch -vv
             wdiff = diff --color-moved --color-words
             ds = diff --color-moved --staged
     [advice]
             statusHints = true
     [rebase]
             autosquash = true
     [diff]
             algorithm = histogram
             compactionHeuristic = 1
             colorMoved = zebra
     [help]
             autocorrect = 1
     [pager]
             diff = diff-so-fancy | less
             log = diff-so-fancy | less
             show = diff-so-fancy | less
     [pull]
             rebase = false
     [init]
             defaultBranch = main
     [credential]
             helper = cache --timeout=3600
     [tag]
             sort = version:refname
   #+END_SRC

** =.gitignore-global=
   :PROPERTIES:
   :header-args: :tangle ~/.gitignore-global
   :END:

   #+BEGIN_SRC gitignore
     # -*- mode: gitignore; -*-

     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/Linux.gitignore #
     ##########################################################################

     ,*~

     # temporary files which can be created if a process still has a handle open of a deleted file
     .fuse_hidden*

     # KDE directory preferences
     .directory

     # Linux trash folder which might appear on any partition or disk
     .Trash-*

     # .nfs files are created when an open file is removed but is still being accessed
     .nfs*


     ##########################################################################
     # Below from:                                                            #
     #                                                                        #
     # https://github.com/github/gitignore/blob/master/Global/macOS.gitignore #
     ##########################################################################

     .DS_Store
     .AppleDouble
     .LSOverride

     # Icon must end with two \r
     Icon


     # Thumbnails
     ._*

     # Files that might appear in the root of a volume
     .DocumentRevisions-V100
     .fseventsd
     .Spotlight-V100
     .TemporaryItems
     .Trashes
     .VolumeIcon.icns

     # Directories potentially created on remote AFP share
     .AppleDB
     .AppleDesktop
     Network Trash Folder
     Temporary Items
     .apdisk


     ##############################################################################
     # Below from:                                                                #
     #                                                                            #
     # https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore #
     ##############################################################################

     # Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
     # Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

     # User-specific stuff
     .idea/**/workspace.xml
     .idea/**/tasks.xml
     .idea/**/usage.statistics.xml
     .idea/**/dictionaries
     .idea/**/shelf

     # Generated files
     .idea/**/contentModel.xml

     # Sensitive or high-churn files
     .idea/**/dataSources/
     .idea/**/dataSources.ids
     .idea/**/dataSources.local.xml
     .idea/**/sqlDataSources.xml
     .idea/**/dynamic.xml
     .idea/**/uiDesigner.xml
     .idea/**/dbnavigator.xml

     # Gradle
     .idea/**/gradle.xml
     .idea/**/libraries

     # Gradle and Maven with auto-import
     # When using Gradle or Maven with auto-import, you should exclude module files,
     # since they will be recreated, and may cause churn.  Uncomment if using
     # auto-import.
     .idea/modules.xml
     .idea/*.iml
     .idea/modules

     # CMake
     cmake-build-*/

     # Mongo Explorer plugin
     .idea/**/mongoSettings.xml

     # File-based project format
     ,*.iws

     # IntelliJ
     out/

     # mpeltonen/sbt-idea plugin
     .idea_modules/

     # JIRA plugin
     atlassian-ide-plugin.xml

     # Cursive Clojure plugin
     .idea/replstate.xml

     # Crashlytics plugin (for Android Studio and IntelliJ)
     com_crashlytics_export_strings.xml
     crashlytics.properties
     crashlytics-build.properties
     fabric.properties

     # Editor-based Rest Client
     .idea/httpRequests

     # Android studio 3.1+ serialized cache file
     .idea/caches/build_file_checksums.ser
   #+END_SRC

* Python

  See also [[#functions-python][Python functions]].

** =requirements-to-freeze.txt=
   :PROPERTIES:
   :header-args: :tangle ~/requirements-to-freeze.txt
   :END:

   Use [[https://www.kennethreitz.org/essays/a-better-pip-workflow][A Better Pip Workflow™]] to specify packages that I do actually
   want installed to the user's packages.

   #+BEGIN_SRC python
     # User packages
     http-prompt
     keyring
     pipdeptree[graphviz]
     twine
     virtualenvwrapper
   #+END_SRC

* =ripgrep=
   :PROPERTIES:
   :header-args: :tangle ~/.ripgreprc
   :END:

  See =RIPGREP_CONFIG_PATH= above.

  #+BEGIN_SRC sh
    --sort-files
  #+END_SRC

* SSH

  Create a configuration directory:

  #+BEGIN_SRC sh
    mkdir -p ${HOME}/.ssh/config.d
  #+END_SRC

** =config=
   :PROPERTIES:
   :header-args: :tangle ~/.ssh/config
   :END:

   #+BEGIN_SRC conf
     ServerAliveCountMax 5
     ServerAliveInterval 60

     Host *
         IdentityAgent ~/.1password/agent.sock

     Host *
         IdentityFile ~/.ssh/id_rsa
         PreferredAuthentications publickey,password

     Include ~/.ssh/config.d/*
   #+END_SRC
